# -*- mode: org -*-
# -*- coding: utf-8 -*-
#+STARTUP: overview indent inlineimages logdrawer

See [[http://orgmode.org/manual/In_002dbuffer-settings.html][here]] for more startup options.

* Good .emacs examples:
[[http://pages.sachachua.com/.emacs.d/Sacha.html#org5f504e8][Sacha Chua]]
[[https://writequit.org/org/settings.html#sec-1-57][Write Quit blog]]
[[https://github.com/dakrone/dakrone-dotfiles/blob/master/emacs.org][dakrone]]
[[https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org#25-windows][angrybacon]]
** Org export examples:
- https://www.reddit.com/r/emacs/comments/6r32q4/orgmode_whats_your_html_export_look_like/
- http://ivanmalison.github.io/dotfiles/#setbackgroundcolorofsourceblocksforexport
* Package installation
use-package loads the package if it's available. If not it logs to *Messages*. [[https://github.com/jwiegley/use-package][Readme]]

** Package setup
#+BEGIN_SRC emacs-lisp
;; -- for new packages, you might have to run: M-x package-refresh-contents
;; to get melpa to work on windows: https://gnutls.org/download.html
(require 'package)
(setq package-archives
      '(("gnu" . "http://elpa.gnu.org/packages/")
        ("org" . "http://orgmode.org/elpa/")
        ("melpa" . "https://melpa.org/packages/")
        ("melpa-stable" . "https://stable.melpa.org/packages/")))
;;(add-to-list 'package-archives
;;             '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(add-to-list 'package-pinned-packages '(cider . "melpa-stable") t)
(package-initialize)
#+END_SRC

** Automatic package install
Copied from [[https://github.com/larstvei/dot-emacs][here.]]
#+BEGIN_SRC emacs-lisp
(let* ((packages
        '(ivy                  ; Better movement between files
          swiper               ; Better movement between files
          counsel              ; Better search
          all-the-icons        ; Icon support for file types
          all-the-icons-ivy    ; Icon support in ivy
          rainbow-delimiters   ; Colors parentheses based on depth
          undo-tree            ; Display a navigable undo tree
          use-package          ; loads packages if available. If not, logs errors to *Messages*
          badwolf-theme        ; Emacs color theme
          gruvbox-theme        ; Emacs color theme
          doom-themes          ; Color theme
          jedi                 ; Python auto-completion for Emacs
          magit                ; control Git from Emacs
          magithub             ; Github integration for Magit
          symon                ; small system monitor
          markdown-mode        ; Emacs Major mode for Markdown-formatted files
          auto-complete        ; auto-complete
          ace-window           ; better window swapping
          org-trello           ; integration between org and trello
          org-ac               ; Auto-complete for org
          org-bullets          ; Improved bullet rendering
          xterm-color          ; color support for the terminal
          smooth-scrolling     ; smooth mouse scrolling
          which-key            ; Shows a popup with possible commands and their shortcuts
          projectile           ; emacs project development
          org-gcal             ; google calendar integration with org
          elfeed               ; RSS/feed reader
          hideshow             ; code folding
          sgml-mode            ; tools
          nxml-mode            ; XML tools
          s                    ; dependency
          dash                 ; dependency
          origami              ; Code folding
          bm                   ; visible bookmarks
          php-mode             ; php mode
          org))                ; Outline-based notes management and organizer
       ;; Remove all packages already installed
       (packages (remove-if 'package-installed-p packages)))
  (when packages
    (ignore-errors (package-refresh-contents)
                   (mapcar 'package-install packages)
                   ;; This package is only relevant for Mac OS X.
                   (when (memq window-system '(mac ns))
                     (package-install 'exec-path-from-shell)))))
#+END_SRC

** Manual package install
M-x package-refresh-contents
M-x all-the-icons
-install-fonts  (install to ~/.fonts/ then run `fc-cache -f -v`

** Load Custom modules
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/modules/")
#+END_SRC

* Themes
;; (load-theme 'badwolf-theme-source-code)
;; (load-theme 'molokai-theme)
;; (load-theme 'mustard-theme)

;; for themes:
;; https://github.com/bkruczyk/badwolf-emacs

;; then run: M-x package-install RET badwolf-theme RET
#+BEGIN_SRC emacs-lisp
(require 'doom-themes)

(setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
      doom-themes-enable-italic t) ; if nil, italics is universally disabled

;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each
;; theme may have their own settings.
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
(load-theme 'gf-doom-molokai t)

;; Enable flashing mode-line on errors
(doom-themes-visual-bell-config)

;; Enable custom neotree theme
(doom-themes-neotree-config)  ; all-the-icons fonts must be installed!



;;  (use-package gruvbox-theme
;;    :init
;;    (setq anzu-cons-mode-line-p t)
;;    (setq gruvbox-contrast 'hard)

    :config
    ;; (gruvbox-modeline-three)
;;    (load-theme 'gruvbox t))
#+END_SRC

* Basic initialization
** Frame size
#+BEGIN_SRC emacs-lisp
;;(when window-system (set-frame-size (selected-frame) 80 40))
;;(if (window-system)
;;  (set-frame-height (selected-frame) 60)
;;  (set-frame-width (selected-frame) 90))
#+END_SRC
** Hide stuff
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(toggle-scroll-bar -1)
(setq inhibit-startup-message t)
#+END_SRC
** Change location of ~ files
By default save all ~ files in this directory:
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+END_SRC

* Package Initialization
** ace window
#+BEGIN_SRC emacs-lisp
(use-package ace-window
:ensure t
:init
(progn
(global-set-key (kbd "C-x O") 'other-frame)
  (global-set-key [remap other-window] 'ace-window)
  (custom-set-faces
   '(aw-leading-char-face
     ((t (:inherit ace-jump-face-foreground :height 3.0))))) 
  ))

(defun z/swap-windows ()
""
(interactive)
(ace-swap-window)
(aw-flip-window)
)

(global-set-key (kbd "M-p") 'z/swap-windows)

(setq aw-keys '(?2 ?3 ?1 ?4 ?5 ?6 ?7 ?8 ?9))
#+END_SRC
** elfeed
#+BEGIN_SRC emacs-lisp
(setq elfeed-feeds
      '(("http://nullprogram.com/feed/" emacs)
        ("http://planet.emacsen.org/atom.xml" emacs)
        ("http://sachachua.com/blog/category/emacs-news/feed/" emacs)
        ("https://www.reddit.com/r/dailyprogrammer/.rss" programming)
        ("https://www.reddit.com/r/machinelearning/.rss" programming)
        ("https://herbsutter.com/feed/" programming)
        ("http://www.datatau.com/rss" machine-learning)
        ("http://news.startup.ml/rss" machine-learning)
        ("https://machinelearningmastery.com/blog/feed/" machine-learning)
        ("https://www.reddit.com/r/cpp/.rss" programming)
        ("https://askldjd.com/feed/" programming)
        ("https://blog.knatten.org/feed/" programming)
        ("https://feeds.feedburner.com/CppTruths?format=xml" programming)
        ("http://codesynthesis.com/~boris/blog/feed/" programming)
        ("http://nedroid.com/feed/" webcomic)))
#+END_SRC
** magit and magithub
[[https://github.com/vermiculus/magithub][link to magithub]]
#+BEGIN_SRC emacs-lisp
(use-package magit)
;;(use-package magithub
;;  :after magit
;;  :config (magithub-feature-autoinject t))
#+END_SRC
** symon system monitor -- deactivated
#+BEGIN_SRC emacs-lisp
;;(use-package symon
;;  :init
;;  (symon-mode))
#+END_SRC
** bookmark management
#+BEGIN_SRC emacs-lisp
(use-package bm
         :ensure t
         :demand t

         :init
         ;; restore on load (even before you require bm)
         (setq bm-restore-repository-on-load t)


         :config
         ;; Allow cross-buffer 'next'
         ;;(setq bm-cycle-all-buffers t)

         ;; where to store persistant files
         (setq bm-repository-file "~/.emacs.d/bm-repository")

         ;; save bookmarks
         (setq-default bm-buffer-persistence t)

         ;; Loading the repository from file when on start up.
         (add-hook' after-init-hook 'bm-repository-load)

         ;; Restoring bookmarks when on file find.
         (add-hook 'find-file-hooks 'bm-buffer-restore)

         ;; Saving bookmarks
         (add-hook 'kill-buffer-hook #'bm-buffer-save)

         ;; Saving the repository to file when on exit.
         ;; kill-buffer-hook is not called when Emacs is killed, so we
         ;; must save all bookmarks first.
         (add-hook 'kill-emacs-hook #'(lambda nil
                                          (bm-buffer-save-all)
                                          (bm-repository-save)))

         ;; The `after-save-hook' is not necessary to use to achieve persistence,
         ;; but it makes the bookmark data in repository more in sync with the file
         ;; state.
         (add-hook 'after-save-hook #'bm-buffer-save)

         ;; Restoring bookmarks
         (add-hook 'find-file-hooks   #'bm-buffer-restore)
         (add-hook 'after-revert-hook #'bm-buffer-restore)

         ;; The `after-revert-hook' is not necessary to use to achieve persistence,
         ;; but it makes the bookmark data in repository more in sync with the file
         ;; state. This hook might cause trouble when using packages
         ;; that automatically reverts the buffer (like vc after a check-in).
         ;; This can easily be avoided if the package provides a hook that is
         ;; called before the buffer is reverted (like `vc-before-checkin-hook').
         ;; Then new bookmarks can be saved before the buffer is reverted.
         ;; Make sure bookmarks is saved before check-in (and revert-buffer)
         (add-hook 'vc-before-checkin-hook #'bm-buffer-save)


         :bind (("<f2>" . bm-next)
                ("S-<f2>" . bm-previous)
                ("C-<f2>" . bm-toggle))
         )
#+END_SRC
** xterm-color
#+BEGIN_SRC emacs-lisp
(require 'xterm-color)
;; comint install
(progn (add-hook 'comint-preoutput-filter-functions 'xterm-color-filter)
       (setq comint-output-filter-functions (remove 'ansi-color-process-output comint-output-filter-functions)))

;; comint uninstall
(progn (remove-hook 'comint-preoutput-filter-functions 'xterm-color-filter)
       (add-to-list 'comint-output-filter-functions 'ansi-color-process-output))

;; For M-x shell, also set TERM accordingly (xterm-256color)

;; You can also use it with eshell (and thus get color output from system ls):

(require 'eshell)

(add-hook 'eshell-mode-hook
          (lambda ()
            (setq xterm-color-preserve-properties t)))

(add-to-list 'eshell-preoutput-filter-functions 'xterm-color-filter)
(setq eshell-output-filter-functions (remove 'eshell-handle-ansi-color eshell-output-filter-functions))
#+END_SRC
** Autocomplete
#+BEGIN_SRC emacs-lisp
(require 'auto-complete)
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/modules/ac-dict")
(ac-config-default)
(define-key ac-completing-map "\C-m" nil)
(define-key ac-complete-mode-map [tab] 'ac-expand)

;; Make sure it's turned on in org mode. Alternative to org-ac
(add-to-list 'ac-modes 'org-mode)

;; Org autocomplete
(require 'org-ac)
(org-ac/config-default)
;;(ac-set-trigger-key "TAB")
#+END_SRC

** Sunshine
#+BEGIN_SRC emacs-lisp
(require 'sunshine)
(setq sunshine-location "15228,USA")
#+END_SRC
** Folding
Origami doesn't currently work the way I want it to. Try hideshow instead.
#+BEGIN_SRC emacs-lisp
;;(use-package origami
;;  :bind (("C-c TAB" . origami-recursively-toggle-node)
;;         ("C-\\" . origami-recursively-toggle-node)
;;         ("M-\\" . origami-close-all-nodes)
;;         ("M-+" . origami-open-all-nodes))
;;  :init
;;  (global-origami-mode))

;; (require 'fold-dwim)
(use-package hideshow
  :bind (("C-c TAB" . hs-toggle-hiding)
         ("C-\\" . hs-show-all)
         ("M-\\" . hs-hide-all))
  :config (add-hook 'prog-mode-hook #'hs-minor-mode))

(require 'sgml-mode)
(require 'nxml-mode)

;; Fix XML folding
(add-to-list 'hs-special-modes-alist
             (list 'nxml-mode
                   "<!--\\|<[^/>]*[^/]>"
                   "-->\\|</[^/>]*[^/]>"
                   "<!--"
                   'nxml-forward-element
                   nil))

;; Fix HTML folding
(dolist (mode '(sgml-mode
                html-mode
                html-erb-mode))
  (add-to-list 'hs-special-modes-alist
               (list mode
                     "<!--\\|<[^/>]*[^/]>"
                     "-->\\|</[^/>]*[^/]>"
                     "<!--"
                     'sgml-skip-tag-forward
                     nil)))

(add-hook 'nxml-mode-hook 'hs-minor-mode)

;; optional key bindings, easier than hs defaults
(define-key nxml-mode-map (kbd "C-c h") 'hs-toggle-hiding)
#+END_SRC
** Smooth scrolling
#+BEGIN_SRC emacs-lisp
(use-package smooth-scrolling
  :ensure t
  :config
  (smooth-scrolling-mode 1))
#+END_SRC
** org trello
#+BEGIN_SRC emacs-lisp
(require 'org-trello)
(custom-set-variables
   ;; '(org-trello-current-prefix-keybinding "C-c x") ;; C-c x as the default prefix
   '(org-trello-files '("~/Dropbox/org/trello/mesh.trello"))) ;; automatic org-trello on files

;; [[https://org-trello.github.io/bindings.html]]
(add-hook 'org-trello-mode-hook
  (lambda ()
    (define-key org-trello-mode-map (kbd "C-c o c") 'org-trello-sync-card)
    (define-key org-trello-mode-map (kbd "C-c o s") 'org-trello-sync-buffer)
    (define-key org-trello-mode-map (kbd "C-c o a") 'org-trello-assign-me)
    (define-key org-trello-mode-map (kbd "C-c o d") 'org-trello-check-setup)
    (define-key org-trello-mode-map (kbd "C-c o D") 'org-trello-delete-setup)
    (define-key org-trello-mode-map (kbd "C-c o b") 'org-trello-create-board-and-install-metadata)
    (define-key org-trello-mode-map (kbd "C-c o k") 'org-trello-kill-entity)
    (define-key org-trello-mode-map (kbd "C-c o K") 'org-trello-kill-cards)
    (define-key org-trello-mode-map (kbd "C-c o a") 'org-trello-archive-card)
    (define-key org-trello-mode-map (kbd "C-c o A") 'org-trello-archive-cards)
    (define-key org-trello-mode-map (kbd "C-c o j") 'org-trello-jump-to-trello-card)
    (define-key org-trello-mode-map (kbd "C-c o J") 'org-trello-jump-to-trello-board)
    (define-key org-trello-mode-map (kbd "C-c o C") 'org-trello-add-card-comments)
    (define-key org-trello-mode-map (kbd "C-c o o") 'org-trello-show-card-comments)
    (define-key org-trello-mode-map (kbd "C-c o l") 'org-trello-show-card-labels)
    (define-key org-trello-mode-map (kbd "C-c o u") 'org-trello-update-board-metadata)
    (define-key org-trello-mode-map (kbd "C-c o h") 'org-trello-help-describing-bindings)))

;; org-trello major mode for all .trello files
(add-to-list 'auto-mode-alist '("\\.trello$" . org-mode))

;; add a hook function to check if this is trello file, then activate the org-trello minor mode.
(add-hook 'org-mode-hook
          (lambda ()
            (let ((filename (buffer-file-name (current-buffer))))
              (when (and filename (string= "trello" (file-name-extension filename)))
              (org-trello-mode)))))
#+END_SRC
** Ivy

#+BEGIN_SRC emacs-lisp
;; Config options for ivy
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(setq enable-recursive-minibuffers t)
(global-set-key "\C-s" 'swiper)
;;(global-set-key "\C-r" 'swiper)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key (kbd "<f6>") 'ivy-resume)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "<f1> f") 'counsel-describe-function)
(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
(global-set-key (kbd "<f1> l") 'counsel-find-library)
;;(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
;;(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
(global-set-key (kbd "C-c g") 'counsel-git)
(global-set-key (kbd "C-c j") 'counsel-git-grep)
(global-set-key (kbd "C-c k") 'counsel-ag)
(global-set-key (kbd "C-x l") 'counsel-locate)
(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
(define-key read-expression-map (kbd "C-r") 'counsel-expression-history)

;; Extra ivy stuff:
(require 'all-the-icons)
(all-the-icons-ivy-setup)
;; end config options for ivy
#+END_SRC

** Hydra
#+BEGIN_SRC emacs-lisp
(require 'hydra)
#+END_SRC
** Octave mode
#+BEGIN_SRC emacs-lisp
(autoload 'octave-mode "octave-mod" nil t)
	(setq auto-mode-alist
	(cons '("\\.m$" . octave-mode) auto-mode-alist))
#+END_SRC
** Undo tree
#+BEGIN_SRC emacs-lisp
;;(use-package undo-tree
;;			 :diminish undo-tree-mode
;;			 :config
;;			 (progn
;;			   (global-undo-tree-mode)
;;			   (setq undo-tree-visualizer-timestamps t)
;;			   (setq undo-tree-visualizer-diff t)))
#+END_SRC

** Which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key :ensure t
  :config (which-key-mode)
  :diminish ""
  )
#+END_SRC
** PHP Mode
#+BEGIN_SRC emacs-lisp
(require 'php-mode)

(add-hook 'php-mode-hook
  '(lambda () (define-abbrev php-mode-abbrev-table "ex" "extends")))

(autoload 'php-mode "php-mode" "Major mode for editing php code." t)
(add-to-list 'auto-mode-alist '("\\.php$" . php-mode))
(add-to-list 'auto-mode-alist '("\\.inc$" . php-mode))
#+END_SRC

** Org mode
*** Basic Org stuff
#+BEGIN_SRC emacs-lisp
  ;;;;;;; Org Mode ;;;;;;;
  (require 'org-install)
  (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (setq org-log-done t)
  (setq org-startup-truncated nil)
  (setq org-agenda-files '("~/Dropbox/org/"))
  (setq org-agenda-window-setup 'current-window)

  (setq org-default-notes-file "~/Dropbox/org/todo.org")
  (setq org-directory "~/Dropbox/org")
  (setq org-startup-indented t)
  (add-hook 'org-mode-hook #'visual-line-mode)


  ;; From [[https://github.com/aaronbieber/dotfiles/blob/master/configs/emacs.d/lisp/init-org.el][here]]
    ;; Logging of state changes
    (setq org-log-done (quote time))
    (setq org-log-redeadline (quote time))
    (setq org-log-reschedule (quote time))
    (setq org-log-into-drawer t)

    (setq org-pretty-entities t)
    (setq org-insert-heading-respect-content t)
    (setq org-ellipsis " …")
    (setq org-export-initial-scope 'subtree)
    (setq org-use-tag-inheritance nil) ;; Use the list form, which happens to be blank
    (setq org-todo-keyword-faces
          '(("OPEN" . org-done)
            ("PAUSED" . org-upcoming-deadline)))

  ;; PDFs visited in Org-mode are opened in Evince (and not in the default choice) http://stackoverflow.com/a/8836108/789593
  (add-hook 'org-mode-hook
        '(lambda ()
           (delete '("\\.pdf\\'" . default) org-file-apps)
           (add-to-list 'org-file-apps '("\\.pdf\\'" . "evince %s"))))

  (defhydra hydra-org (:color red :columns 3)
    "Org Mode Movements"
    ("n" outline-next-visible-heading "next heading")
    ("p" outline-previous-visible-heading "prev heading")
    ("N" org-forward-heading-same-level "next heading at same level")
    ("P" org-backward-heading-same-level "prev heading at same level")
    ("u" outline-up-heading "up heading")
    ("g" org-goto "goto" :exit t))

  ;;(setq org-todo-keywords '((sequence "TODO" "IN-PROGRESS" "WAITING" "|" "DONE" "CANCELED")))
  ;;(setq org-blank-before-new-entry (quote ((heading) (plain-list-item))))
  (setq org-log-done (quote time))
  (setq org-log-redeadline (quote time))
  (setq org-log-reschedule (quote time))
  ;;(setq org-src-window-setup 'current-window)


  (setq org-modules
          '(org-bbdb org-bibtex org-docview org-habit org-info org-w3m))
  (setq org-todo-keywords
          '((sequence "TODO" "IN-PROGRESS" "WAITING" "|" "DONE" "CANCELED")))

  (setq org-todo-keyword-faces
    '(("TODO" . (:foreground "#ff39a3" :weight bold))
  	("INPROGRESS" . "#E35DBF")
  	("IN-PROGRESS" . "#00A8E9")
      ("CANCELED" . "#555555")
  	("WAITING" . "pink")
  	("DONE" . "#555555")))

  ;; org-goto/ivy interplay hack
  (setq org-goto-interface 'outline-path-completion)
  (setq org-outline-path-complete-in-steps nil)

(defun gcal-fetch-and-sync ()
  "Fetch the calendar and then sync"
  (interactive)
  (org-gcal-fetch)
  (org-gcal-sync))

(add-hook 'org-agenda-mode-hook (lambda () (gcal-fetch-and-sync) ))
(add-hook 'org-capture-after-finalize-hook (lambda () (gcal-fetch-and-sync) ))
;;(add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync) ))
;;(add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync) ))
#+END_SRC
*** Agenda view
Some good org stuff taken from [[https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html][here.]]
#+BEGIN_SRC emacs-lisp

  (setq org-agenda-skip-scheduled-if-done t)
  (setq org-agenda-custom-commands
        '(("d" "Daily agenda and all TODOs"
           (;; Not-yet-done priority "A" entries (will also display
            ;; non-todo entries).
            (tags "PRIORITY=\"A\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "High-priority unfinished tasks:")))
            ;; Only todo entries (must be dated to appear in agenda)
            ;; These are usually habits; entries that are marked todo,
            ;; have a date in scope, and do not have a priority of "A".
            (agenda ""
                    ((org-agenda-span 1)
                     (org-agenda-skip-function '(org-agenda-skip-entry-if 'nottodo 'any))))
            ;; Only non-todo entries (still must be dated to appear in
            ;; here). These are things I just want to be aware of,
            ;; like anniversaries, vacations, or other peripheral
            ;; events.
            (agenda ""
                    ((org-agenda-span 1)
                     (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'any))))
            ;; Items completed during this work week. My skip function
            ;; here goes through some contortions that may not be
            ;; necessary; it would be faster to simply show "closed in
            ;; the last 7 days". Maybe some other time.
            (todo "DONE"
                  ((org-agenda-skip-function 'air-org-skip-if-not-closed-this-week)
                   (org-agenda-overriding-header "Closed this week:"))))
           ((org-agenda-compact-blocks t)))

          ("b" "Backlog items"
           ((alltodo ""
                     ((org-agenda-skip-function '(or (air-org-skip-if-habit)
                                                     (air-org-skip-if-priority ?A)
                                                     (org-agenda-skip-if nil '(scheduled deadline))))
                      (org-agenda-overriding-header "ALL normal priority tasks:"))))
           ((org-agenda-compact-blocks t)))
          ("c" "Simple agenda view"
           ((agenda "")
           (alltodo "")))
          ("g" "Individuals' current goals"
           ((tags "perfgoal+TODO=\"TODO\"|perfgoal+TODO=\"IN-PROGRESS\""
                  ((org-agenda-overriding-header "Individuals' current goals:")))))
          ))
(set-face-attribute 'org-upcoming-deadline nil :foreground "gold1")

(defun air-org-skip-subtree-if-habit ()
  "Skip an agenda entry if it has a STYLE property equal to \"habit\"."
  (let ((subtree-end (save-excursion (org-end-of-subtree t))))
    (if (string= (org-entry-get nil "STYLE") "habit")
        subtree-end
      nil)))

(defun air-org-skip-subtree-if-priority (priority)
  "Skip an agenda subtree if it has a priority of PRIORITY.

PRIORITY may be one of the characters ?A, ?B, or ?C."
  (let ((subtree-end (save-excursion (org-end-of-subtree t)))
        (pri-value (* 1000 (- org-lowest-priority priority)))
        (pri-current (org-get-priority (thing-at-point 'line t))))
    (if (= pri-value pri-current)
        subtree-end
      nil)))

#+END_SRC

A good agenda hydra:
#+BEGIN_SRC emacs-lisp
;;** org-agenda-view
(defun org-agenda-cts ()
  (and (eq major-mode 'org-agenda-mode)
	   (let ((args (get-text-property
					(min (1- (point-max)) (point))
					'org-last-args)))
		 (nth 2 args))))

(defhydra hydra-org-agenda-view (:hint none)
    "
_d_: ?d? day        _g_: time grid=?g?  _a_: arch-trees
_w_: ?w? week       _[_: inactive       _A_: arch-files
_t_: ?t? fortnight  _f_: follow=?f?     _r_: clock report=?r?
_m_: ?m? month      _e_: entry text=?e? _D_: include diary=?D?
_y_: ?y? year       _q_: quit           _L__l__c_: log = ?l?"
	("SPC" org-agenda-reset-view)
	("d" org-agenda-day-view (if (eq 'day (org-agenda-cts)) "[x]" "[ ]"))
	("w" org-agenda-week-view (if (eq 'week (org-agenda-cts)) "[x]" "[ ]"))
	("t" org-agenda-fortnight-view (if (eq 'fortnight (org-agenda-cts)) "[x]" "[ ]"))
	("m" org-agenda-month-view (if (eq 'month (org-agenda-cts)) "[x]" "[ ]"))
	("y" org-agenda-year-view (if (eq 'year (org-agenda-cts)) "[x]" "[ ]"))
	("l" org-agenda-log-mode (format "% -3S" org-agenda-show-log))
	("L" (org-agenda-log-mode '(4)))
	("c" (org-agenda-log-mode 'clockcheck))
	("f" org-agenda-follow-mode (format "% -3S" org-agenda-follow-mode))
	("a" org-agenda-archives-mode)
	("A" (org-agenda-archives-mode 'files))
	("r" org-agenda-clockreport-mode (format "% -3S" org-agenda-clockreport-mode))
	("e" org-agenda-entry-text-mode (format "% -3S" org-agenda-entry-text-mode))
	("g" org-agenda-toggle-time-grid (format "% -3S" org-agenda-use-time-grid))
	("D" org-agenda-toggle-diary (format "% -3S" org-agenda-include-diary))
	("!" org-agenda-toggle-deadlines)
	("[" (let ((org-agenda-include-inactive-timestamps t))
		   (org-agenda-check-type t 'timeline 'agenda)
		   (org-agenda-redo)
		   (message "Display now includes inactive timestamps as well")))
	("q" (message "Abort") :exit t)
	("v" nil))
;;(define-key org-agenda-mode-map "v" 'hydra-org-agenda-view/body)
#+END_SRC

*** Capture
Capture templates. See [[http://cestlaz.github.io/posts/using-emacs-24-capture-2/#.WTtEbXWw5pg][this link]] for info on how to bind a key to bring this up even if emacs isn't in focus. See [[http://orgmode.org/manual/Template-expansion.html#Template-expansion][this link]] for template shortcuts (the % commands below).
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c c")
       'org-capture)

(setq org-capture-templates
      '(("a" "Appointment" entry (file  "~/Dropbox/org/gcal.org" )
         "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")
        ("n" "Note" entry (file+headline "~/Dropbox/org/notes.org" "Notes")
         "* %?\n%T")
        ("l" "Link" entry (file+headline "~/Dropbox/org/links.org" "Links")
         "* %? %^L %^g \n%T" :prepend t)
        ("t" "To Do Today" checkitem (file+headline "~/Dropbox/org/today.org" "To do today")
         " [ ] %?" :prepend t)
        ("p" "Personal To Do Item" entry (file+headline "~/Dropbox/org/todo.org" "To Do Items")
         "* %?\n%T" :prepend t)
        ("m" "Mesh To Do Item" entry (file+headline "~/Dropbox/org/mesh.org" "Mesh To Do Items")
         "* %?\n%T" :prepend t)
        ("i" "Ideas" entry (file+headline "~/Dropbox/org/ideas.org" "Ideas")
         "* %?\n%T" :prepend t)
        ("j" "Journal" entry (file+datetree "~/Dropbox/org/journal.org")
         "* %?\nEntered on %U\n")))
#+END_SRC
*** Refile
#+BEGIN_SRC emacs-lisp
(setq gf-refile-targets
      '("~/Dropbox/org/notes.org"
        "~/Dropbox/org/links.org"
        "~/Dropbox/org/todo.org"
        "~/Dropbox/org/gcal.org"
        "~/Dropbox/org/journal.org"
        "~/Dropbox/org/old/done.org"
        "~/Dropbox/org/old/cancelled.org"
        "~/Dropbox/org/mesh.org"))

(setq org-refile-targets
      '((nil :maxlevel . 1)
        (gf-refile-targets :maxlevel . 1)))
#+END_SRC
** Rainbow Delimeters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters :ensure t
  :config (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
** Org Bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :init

  ;; org-bullets-bullet-list
  ;; default: "◉ ○ ✸ ✿"
  ;; large: ♥ ● ◇ ✚ ✜ ☯ ◆ ♠ ♣ ♦ ☢ ❀ ◆ ◖ ▶
  ;; Small: ► • ★ ▸
  (setq org-bullets-bullet-list '("•"))

  ;; others: ▼, ↴, ⬎, ⤷,…, and ⋱.
  ;; (setq org-ellipsis "⤵")
  (setq org-ellipsis "…")

  :config
  (add-hook 'org-mode-hook #'org-bullets-mode))
#+END_SRC
** Markdown mode
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+END_SRC
* Keybinds
There are also a few of these sprinkled in above sections that are specific to certain modules.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x g") 'magit-status)

;; Set up the keyboard so the delete key on both the regular keyboard
;; and the keypad delete the character under the cursor and to the right
;; under X, instead of the default, backspace behavior.
(global-set-key [delete] 'delete-char)
(global-set-key [kp-delete] 'delete-char)

(define-key esc-map "g" 'goto-line)
(define-key esc-map "G" 'what-line)
(define-key esc-map "r" 'replace-string)
(define-key esc-map "o" 'other-window)

(global-set-key "\C-x\C-c" 'my-delete-frame)
(global-set-key "\C-x\C-m" 'execute-extended-command) ;; execute M-x w/o alt

;; kill a word. changes the Cut function as well. 
(global-set-key "\C-w"     'backward-kill-word)
(global-set-key "\C-x\C-k" 'kill-region)

;; (global-set-key [f1] 'goto-line) 
;; (global-set-key [f2] 'undo) 
;; (global-set-key [f1] '(lambda () (interactive) (jjj-insert-comment "//"))) 
;; (global-set-key [f2] '(lambda () (interactive) (jjj-delete-comment "//"))) 
;; (global-set-key [f3] '(lambda () (interactive) (jjj-insert-comment "%"))) 
;; (global-set-key [(shift f3)] 'comment-region) 
;; (global-set-key [f4] '(lambda () (interactive) (jjj-delete-comment "%")))
(global-set-key [(shift f4)] 'universal-argument)
(global-set-key [f5] 'shell)
;; (global-set-key [f6] 'remove-dos-eol) 

;;(global-set-key [f6] 'find-wiki-node)

(global-set-key [f7] 'sunshine-quick-forecast)
;; (global-set-key [f8] 'delete-other-windows) ; unsplit window
(global-set-key [f9] 'font-lock-mode)

;; Make control+pageup/down scroll the other buffer
(global-set-key [C-next] 'scroll-other-window)
(global-set-key [C-prior] 'scroll-other-window-down)
#+END_SRC
* Custom functions
** Preserve window size
#+BEGIN_SRC emacs-lisp
(defun save-framegeometry ()
  "Gets the current frame's geometry and saves to ~/.emacs.d/framegeometry."
  (let (
        (framegeometry-left (frame-parameter (selected-frame) 'left))
        (framegeometry-top (frame-parameter (selected-frame) 'top))
        (framegeometry-width (frame-parameter (selected-frame) 'width))
        (framegeometry-height (frame-parameter (selected-frame) 'height))
        (framegeometry-file (expand-file-name "~/.emacs.d/framegeometry"))
        )

    (when (not (number-or-marker-p framegeometry-left))
      (setq framegeometry-left 0))
    (when (not (number-or-marker-p framegeometry-top))
      (setq framegeometry-top 0))
    (when (not (number-or-marker-p framegeometry-width))
      (setq framegeometry-width 0))
    (when (not (number-or-marker-p framegeometry-height))
      (setq framegeometry-height 0))

    (with-temp-buffer
      (insert
       ";;; This is the previous emacs frame's geometry.\n"
       ";;; Last generated " (current-time-string) ".\n"
       "(setq initial-frame-alist\n"
       "      '(\n"
       (format "        (top . %d)\n" (max framegeometry-top 0))
       (format "        (left . %d)\n" (max framegeometry-left 0))
       (format "        (width . %d)\n" (max framegeometry-width 0))
       (format "        (height . %d)))\n" (max framegeometry-height 0)))
      (when (file-writable-p framegeometry-file)
        (write-file framegeometry-file))))
  )

(defun load-framegeometry ()
  "Loads ~/.emacs.d/framegeometry which should load the previous frame's geometry."
  (let ((framegeometry-file (expand-file-name "~/.emacs.d/framegeometry")))
    (when (file-readable-p framegeometry-file)
      (load-file framegeometry-file)))
  )

;; Special work to do ONLY when there is a window system being used
(if window-system
    (progn
      (add-hook 'after-init-hook 'load-framegeometry)
      (add-hook 'kill-emacs-hook 'save-framegeometry))
  )
#+END_SRC
** Old stuff
#+BEGIN_SRC emacs-lisp
(defun remove-dos-eol ()
  "Do not show ^M in files containing mixed UNIX and DOS line endings."
  (interactive)
  (setq buffer-display-table (make-display-table))
  (aset buffer-display-table ?\^M []))

(defun my-delete-frame ()
  "Deletes the current frame. If this is the last frame, quit Emacs."
  (interactive)
  (if (cdr (frame-list))
      (delete-frame)
    (save-buffers-kill-emacs)))
;;(global-set-key [\M-f4] 'my-delete-frame)


;;Add perl print template
(defun insert-perl-print ()
  "Add perl print template"
  (interactive "*")
  (setq steve-var "print \"\\n\";")
  (insert steve-var)
)

;;; Code:
(defun jjj-delete-string (s)
  "Delete string S."  (interactive)
  (let ((n (length s)))
    (while (> n 0)
      (progn
        (delete-char 1)
        (setq n (- n 1)) ) ) )
  )

(defun jjj-backward-delete-string (s)
  "Backward delete string S."  (interactive)
  (let ((n (length s)))
    (while (> n 0)
      (progn
        (backward-delete-char 1)
        (setq n (- n 1)) ) ) )
  )


;;; ONE LINE COMMENTS:
(defun jjj-insert-comment (s)
  "Insert S at begin of line to comment line out."  (interactive)
  (progn
    (beginning-of-line)
    (progn
      (insert s)
      (beginning-of-line)
      (delete-horizontal-space)
      (beginning-of-line 2) )
    (recenter) )
  )

(defun jjj-delete-comment (s)
  "Delete S at begin of line to uncomment line."  (interactive)
  (progn
    (beginning-of-line)
    (progn
      (delete-horizontal-space)
      (jjj-delete-string s)
      (beginning-of-line 2) )
    (recenter) )
  )

;;This method, when bound to C-x C-c, allows you to close an emacs frame the 
;;same way, whether it's the sole window you have open, or whether it's
;;a "child" frame of a "parent" frame.  If you're like me, and use emacs in
;;a windowing environment, you probably have lots of frames open at any given
;;time.  Well, it's a pain to remember to do Ctrl-x 5 0 to dispose of a child
;;frame, and to remember to do C-x C-x to close the main frame (and if you're
;;not careful, doing so will take all the child frames away with it).  This
;;is my solution to that: an intelligent close-frame operation that works in 
;;all cases (even in an emacs -nw session).
(defun intelligent-close ()
  "quit a frame the same way no matter what kind of frame you are on"
  (interactive)
  (if (eq (car (visible-frame-list)) (selected-frame))
      ;;for parent/master frame...
      (if (> (length (visible-frame-list)) 1)
          ;;close a parent with children present
   (delete-frame (selected-frame))
        ;;close a parent with no children present
 (save-buffers-kill-emacs))
    ;;close a child frame
    (delete-frame (selected-frame))))
#+END_SRC
** Reload/update packages
#+BEGIN_SRC emacs-lisp
(defun package-upgrade-all ()
  "Upgrade all packages automatically without showing *Packages* buffer."
  (interactive)
  (package-refresh-contents)
  (let (upgrades)
    (cl-flet ((get-version (name where)
                (let ((pkg (cadr (assq name where))))
                  (when pkg
                    (package-desc-version pkg)))))
      (dolist (package (mapcar #'car package-alist))
        (let ((in-archive (get-version package package-archive-contents)))
          (when (and in-archive
                     (version-list-< (get-version package package-alist)
                                     in-archive))
            (push (cadr (assq package package-archive-contents))
                  upgrades)))))
    (if upgrades
        (when (yes-or-no-p
               (message "Upgrade %d package%s (%s)? "
                        (length upgrades)
                        (if (= (length upgrades) 1) "" "s")
                        (mapconcat #'package-desc-full-name upgrades ", ")))
          (save-window-excursion
            (dolist (package-desc upgrades)
              (let ((old-package (cadr (assq (package-desc-name package-desc)
                                             package-alist))))
                (package-install package-desc)
                (package-delete  old-package)))))
      (message "All packages are up to date"))))
#+END_SRC
* Tweaks
** Font lock tweak
#+BEGIN_SRC emacs-lisp
;;(require 'font-lock)
;;(global-font-lock-mode 1 t)
(if (fboundp 'global-font-lock-mode)
    (global-font-lock-mode 1)        ; GNU Emacs
  (setq font-lock-auto-fontify t))   ; XEmacs
#+END_SRC
* Misc
#+BEGIN_SRC emacs-lisp
;; show line number:
(setq line-number-mode t)

;; Highlight the current line
(global-hl-line-mode 1)

;;; Display time and date on the status line
(setq display-time-day-and-date t)
(display-time)

;; restore the previous desktop on restart
(desktop-save-mode 1)

;;; Display an area as highlighted when you select it
(setq-default transient-mark-mode t)

;;; Case-insensitive file-complete
(setq read-file-name-completion-ignore-case t)
(setq completion-ignore-case t)

;;; show matching parens
(show-paren-mode t)

;; Make all "yes or no" prompts show "y or n" instead
(fset 'yes-or-no-p 'y-or-n-p)

;; Open unidentified files in text mode
(setq default-major-mode 'text-mode)
(setq-default indent-tabs-mode t)

;;; set mode depending on file name
(setq auto-mode-alist 
      '(("\\.org$" . org-mode) ("\\.py$" . python-mode) ("\\.esp$" . perl-mode) ("\\.pm$" . perl-mode) ("\\.sql$" . sql-mode) ("\\.text$" . text-mode) ("\\.notes$" . text-mode) ("\\.tmpl" . xml-mode) ("\\.c$" . c-mode) ("\\.h$" . c++-mode) ("\\.C$" . c++-mode) ("\\.cpp$" . c++-mode) ("\\.cc$" . c++-mode) ("\\.H$" . c++-mode) ("\\.tex$" . TeX-mode) ("\\.el$" . emacs-lisp-mode) ("\\.scm$" . scheme-mode) ("\\.l$" . lisp-mode) ("\\.lisp$" . lisp-mode) ("\\.f$" . fortran-mode) ("\\.mss$" . scribe-mode) ("\\.pl$" . perl-mode) ("\\.TeX$" . TeX-mode) ("\\.sty$" . LaTeX-mode) ("\\.bbl$" . LaTeX-mode) ("\\.bib$" . text-mode) ("\\.article$" . text-mode) ("\\.letter$" . text-mode) ("\\.texinfo$" . texinfo-mode) ("\\.lsp$" . lisp-mode) ("\\.prolog$" . prolog-mode) ("^/tmp/Re" . text-mode) ("^/tmp/fol/" . text-mode) ("/Message[0-9]*$" . text-mode) ("\\.y$" . c-mode) ("\\.scm.[0-9]*$" . scheme-mode) ("[]>:/]\\..*emacs" . emacs-lisp-mode) ("\\.ml$" . lisp-mode) ("\\.x$" . c-mode) ("\\.md" . markdown-mode) ("\\.launch" . xml-mode)))

(require 'dabbrev)


(require 'visual-regexp)
;;(require 'visual-regexp-steroids)
(define-key global-map (kbd "C-c r") 'vr/replace)
(define-key global-map (kbd "C-c q") 'vr/query-replace)


#+END_SRC
